<#@ template language="C#" hostSpecific="true"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="$(ProjectDir)bin\Debug\EPPlus.dll"#> 
<#@ import namespace="OfficeOpenXml" #>
<#@ import namespace="System.Data.Linq"#> 
<#@ import namespace="System.Collections.Generic"#>
<#@ assembly name="System.Data.Linq"#>
// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>
using System;   
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using OfficeOpenXml;
public class <#=ClassName#>
{

<#
	var excelFileInfo  = new System.IO.FileInfo(ConvertXlsToXlsx(System.IO.Path.GetDirectoryName(Host.TemplateFile) + @"\" + ExcelFileName));
	var columnList = new List<Tuple<string,string>>();
	using (var package = new ExcelPackage(excelFileInfo))
	{
		ExcelWorkbook workBook = package.Workbook;
		if (workBook != null)
		{
			if (workBook.Worksheets.Count > 0)
			{
				ExcelWorksheet currentWorksheet = workBook.Worksheets[1];
				var colHeader = "1";
				for(int col = 1; colHeader != ""; col++)
				{
					var cell = currentWorksheet.Cells[1,col];
					var nextRow = 2;
					object nextCellValue;
					do {
				    nextCellValue = currentWorksheet.Cells[nextRow,col].Value;
					nextRow++;
                    } while(nextCellValue == null && nextRow <= currentWorksheet.Dimension.End.Row);

					colHeader = (cell.Value ?? "").ToString();
					var colType = nextCellValue == null ? "string" : (nextCellValue is Double ? "double?" : (nextCellValue is DateTime) ? "DateTime?" : "string");
					if(colHeader != "")
                    {
						var count = 0;
						for(int i = 0; i< colHeader.Length; i++)
                        {
							if(Char.IsNumber(colHeader.ToCharArray()[i]))
                            {
								count++;
                            } else {
								break;
                            }
                        }
						if(count > 0) 
                        {
							colHeader = colHeader.Substring(count) + colHeader.Substring(0,count);
                        }
						columnList.Add(Tuple.Create(colHeader.ToString().Replace(" ",""), colType.Replace("?","")));
						ClearIndent();
						PushIndent("    ");
		  				WriteLine("public " + colType + " " + colHeader.ToString().Replace(" ","") + " {get;set;}");						
						 
                    }
				}

	
	WriteLine("");
				ClearIndent();
	#>
	public <#=ClassName#>(IList<string> items) 
	{
			<#	
			var currentIndent = CurrentIndent;
			for(int i=0; i < columnList.Count; i++)
			{
				
				WriteLine(columnList[i].Item1.Trim() + " = " + (columnList[i].Item2 == "DateTime" ? "ToNullable<DateTime>(items[" + i + "])" : (columnList[i].Item2 == "double" ? "ToNullable<Double>(items[" + i +"])" : "items[" + i + "]")) + ";");
				if(CurrentIndent == "")
                {
					PushIndent("            ");
                }
			}
			PopIndent();
			#>		
	}


	public override string ToString()
	{

    return string.Join("|", typeof(<#=ClassName#>).GetProperties().Select(x => x.GetValue(this, null)));
	}


	public static T? ToNullable<T>(string s) where T: struct
	{
		s = s.Replace("NA","");
        var result = new T?();
        if (!string.IsNullOrEmpty(s) && s.Trim().Length > 0)
        {
            var conv = TypeDescriptor.GetConverter(typeof(T));
            result = (T?)conv.ConvertFrom(s);
        }
        return result;
	}


	<#	
			}
		}
	}	
#>
}



public class ExcelHelper
{

   public List<<#=ClassName#>>  ParseFile()
   {		
		var result = new List<<#=ClassName#>>();	
		var excelFileInfo  = new FileInfo(@"<#=ConvertXlsToXlsx(System.IO.Path.GetDirectoryName(Host.TemplateFile) + @"\" + ExcelFileName)#>");
		using (var package = new ExcelPackage(excelFileInfo))
		{
			ExcelWorkbook workBook = package.Workbook;
			if (workBook != null)
			{
				if (workBook.Worksheets.Count > 0)
				{
					ExcelWorksheet currentWorksheet = workBook.Worksheets.First();
					
					for(int row = 2; ; row++)
					{
						var propertyValues = new List<string>();
						for(int col = 1; col <= typeof(<#=ClassName#>).GetProperties().Length; col++)
						{
							var cell = currentWorksheet.Cells[row,col];
							var colValue = cell.Value;
							propertyValues.Add((colValue ?? "").ToString());
						}	
						if(string.Join("",propertyValues).Trim() == "")
							break;
						result.Add(new <#=ClassName#>(propertyValues));

					}
				}
			}
		}
		return result;
   }
	
}
<#+
public string ClassName = "DrugSearch";
public string ExcelFileName = "SampleExcelFile.xlsx";
public string Password = "";
public string ExcelCnvPath = "";
public string ConvertXlsToXlsx(string excelPath)
{
		if(!(ExcelFileName.Contains("xlsx")))
		{    try
				{
					var testPath1 = Environment.GetEnvironmentVariable("ProgramFiles(x86)") + @"\Microsoft Office\Office12\excelcnv.exe";
					var testPath2 =  (Environment.GetEnvironmentVariable("ProgramFiles") + @"\Microsoft Office\Office15\excelcnv.exe").Replace(" (x86)","");
					var testPath3 = Environment.GetEnvironmentVariable("ProgramFiles") + @"\Microsoft Office\Office12\excelcnv.exe";
					var processFilePath = System.IO.File.Exists(testPath1) ? testPath1 : (System.IO.File.Exists(testPath2) ?  testPath2 : (System.IO.File.Exists(testPath3) ? testPath3 : (System.IO.File.Exists(ExcelCnvPath) ? ExcelCnvPath : "")));
				   if(processFilePath == "") 
					{
						/*this.Errors("Could not find excelcnv.exe in the expected path. */
					}
					string processArguments = "-oice \"" + excelPath + "\" \"" + System.IO.Path.GetDirectoryName(excelPath) + @"\" + System.IO.Path.GetFileNameWithoutExtension(excelPath) + ".xlsx\"";
					using (var process = new  System.Diagnostics.Process())
					{
						process.StartInfo.FileName = processFilePath;
						process.StartInfo.Arguments = processArguments;
						process.Start();
						process.WaitForExit();
					}
					return excelPath.Replace("xls","xlsx");
				}
				catch
				{
				   /* this.Errors("Failed to Convert xls to xlsx");*/
				}
		}
		return excelPath;
}

#>